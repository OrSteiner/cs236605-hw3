cpu-bind=MASK - rishon3, task  0  0 [17696]: mask 0x100000001 set
cpu-bind=MASK - rishon3, task  0  0 [17696]: mask 0x100000001 set
*** SLURM BATCH JOB 'RNN_exp' STARTING ***
[NbConvertApp] Converting notebook Part1_Sequence.ipynb to notebook
[NbConvertApp] Executing notebook with kernel: python3
[NbConvertApp] ERROR | Error while converting 'Part1_Sequence.ipynb'
Traceback (most recent call last):
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/nbconvertapp.py", line 408, in export_single_notebook
    output, resources = self.exporter.from_filename(notebook_filename, resources=resources)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/exporters/exporter.py", line 179, in from_filename
    return self.from_file(f, resources=resources, **kw)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/exporters/exporter.py", line 197, in from_file
    return self.from_notebook_node(nbformat.read(file_stream, as_version=4), resources=resources, **kw)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/exporters/notebook.py", line 32, in from_notebook_node
    nb_copy, resources = super(NotebookExporter, self).from_notebook_node(nb, resources, **kw)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/exporters/exporter.py", line 139, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/exporters/exporter.py", line 316, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 47, in __call__
    return self.preprocess(nb, resources)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 381, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/home/shaigue/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 424, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
import torch.nn as nn
import torch.optim as optim
from hw3.training import RNNTrainer

torch.manual_seed(42)

lr = 0.01
num_epochs = 500
# num_epochs = 100
print(char_to_idx)
in_dim = vocab_len
h_dim = 128
n_layers = 2
loss_fn = nn.CrossEntropyLoss()
model = charnn.MultilayerGRU(in_dim, h_dim, out_dim=in_dim, n_layers=n_layers).to(device)
optimizer = optim.Adam(model.parameters(), lr=lr)
trainer = RNNTrainer(model, loss_fn, optimizer, device)

for epoch in range(num_epochs):
    epoch_result = trainer.train_epoch(dl_corpus_ss, verbose=False)
    
    # Every X epochs, we'll generate a sequence starting from the first char in the first sequence
    # to visualize how/if/what the model is learning.
    if epoch == 0 or (epoch+1) % 25 == 0:
        avg_loss = np.mean(epoch_result.losses)
        accuracy = np.mean(epoch_result.accuracy)
        print(f'\nEpoch #{epoch+1}: Avg. loss = {avg_loss:.3f}, Accuracy = {accuracy:.2f}%')
        
        generated_sequence = charnn.generate_from_model(model, subset_text[0],
                                                        seq_len*(subset_end-subset_start),
                                                        (char_to_idx,idx_to_char), T=0.1)
        # Stop if we've successfully memorized the small dataset.
        print(generated_sequence)
        print("length of the generated sequence: ", len(generated_sequence), "len sup: ", len(subset_text))
        if generated_sequence == subset_text:
            break

# Test successful overfitting
test.assertGreater(epoch_result.accuracy, 99)
test.assertEqual(generated_sequence, subset_text)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
[0;32m<ipython-input-14-c5e2ff7bcf46>[0m in [0;36m<module>[0;34m[0m
[1;32m     18[0m [0;34m[0m[0m
[1;32m     19[0m [0;32mfor[0m [0mepoch[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mnum_epochs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 20[0;31m     [0mepoch_result[0m [0;34m=[0m [0mtrainer[0m[0;34m.[0m[0mtrain_epoch[0m[0;34m([0m[0mdl_corpus_ss[0m[0;34m,[0m [0mverbose[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     21[0m [0;34m[0m[0m
[1;32m     22[0m     [0;31m# Every X epochs, we'll generate a sequence starting from the first char in the first sequence[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/cs236605-hw3/hw3/training.py[0m in [0;36mtrain_epoch[0;34m(self, dl_train, **kw)[0m
[1;32m    239[0m         [0mself[0m[0;34m.[0m[0mh[0m [0;34m=[0m [0mtorch[0m[0;34m.[0m[0mzeros[0m[0;34m([0m[0;34m([0m[0mB[0m[0;34m,[0m [0mL[0m[0;34m,[0m [0mH[0m[0;34m)[0m[0;34m,[0m [0mrequires_grad[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    240[0m         [0;31m# ========================[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 241[0;31m         [0;32mreturn[0m [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mtrain_epoch[0m[0;34m([0m[0mdl_train[0m[0;34m,[0m [0;34m**[0m[0mkw[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    242[0m [0;34m[0m[0m
[1;32m    243[0m     [0;32mdef[0m [0mtest_epoch[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mdl_test[0m[0;34m:[0m [0mDataLoader[0m[0;34m,[0m [0;34m**[0m[0mkw[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/cs236605-hw3/hw3/training.py[0m in [0;36mtrain_epoch[0;34m(self, dl_train, **kw)[0m
[1;32m    138[0m         """
[1;32m    139[0m         [0mself[0m[0;34m.[0m[0mmodel[0m[0;34m.[0m[0mtrain[0m[0;34m([0m[0;32mTrue[0m[0;34m)[0m  [0;31m# set train mode[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 140[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_foreach_batch[0m[0;34m([0m[0mdl_train[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mtrain_batch[0m[0;34m,[0m [0;34m**[0m[0mkw[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    141[0m [0;34m[0m[0m
[1;32m    142[0m     [0;32mdef[0m [0mtest_epoch[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mdl_test[0m[0;34m:[0m [0mDataLoader[0m[0;34m,[0m [0;34m**[0m[0mkw[0m[0;34m)[0m [0;34m->[0m [0mEpochResult[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/cs236605-hw3/hw3/training.py[0m in [0;36m_foreach_batch[0;34m(dl, forward_fn, verbose, max_batches)[0m
[1;32m    210[0m             [0;32mfor[0m [0mbatch_idx[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mnum_batches[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    211[0m                 [0mdata[0m [0;34m=[0m [0mnext[0m[0;34m([0m[0mdl_iter[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 212[0;31m                 [0mbatch_res[0m [0;34m=[0m [0mforward_fn[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    213[0m [0;34m[0m[0m
[1;32m    214[0m                 [0mpbar[0m[0;34m.[0m[0mset_description[0m[0;34m([0m[0;34mf'{pbar_name} ({batch_res.loss:.3f})'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/cs236605-hw3/hw3/training.py[0m in [0;36mtrain_batch[0;34m(self, batch)[0m
[1;32m    269[0m         [0mself[0m[0;34m.[0m[0moptimizer[0m[0;34m.[0m[0mzero_grad[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    270[0m [0;34m[0m[0m
[0;32m--> 271[0;31m         [0my_pred[0m[0;34m,[0m [0mtemp_h[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mmodel[0m[0;34m([0m[0mx[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mh[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    272[0m         [0my_pred[0m [0;34m=[0m [0my_pred[0m[0;34m.[0m[0mtranspose[0m[0;34m([0m[0;36m1[0m[0;34m,[0m [0;36m2[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    273[0m         [0;31m# print("y pred: ", y_pred)[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/torch/nn/modules/module.py[0m in [0;36m__call__[0;34m(self, *input, **kwargs)[0m
[1;32m    487[0m             [0mresult[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_slow_forward[0m[0;34m([0m[0;34m*[0m[0minput[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    488[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 489[0;31m             [0mresult[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mforward[0m[0;34m([0m[0;34m*[0m[0minput[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    490[0m         [0;32mfor[0m [0mhook[0m [0;32min[0m [0mself[0m[0;34m.[0m[0m_forward_hooks[0m[0;34m.[0m[0mvalues[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    491[0m             [0mhook_result[0m [0;34m=[0m [0mhook[0m[0;34m([0m[0mself[0m[0;34m,[0m [0minput[0m[0;34m,[0m [0mresult[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/cs236605-hw3/hw3/charnn.py[0m in [0;36mforward[0;34m(self, input, hidden_state)[0m
[1;32m    356[0m                 [0mparams[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mlayer_params[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m    357[0m                 [0mh_i[0m [0;34m=[0m [0mlayer_states[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 358[0;31m                 [0mz[0m [0;34m=[0m [0mF[0m[0;34m.[0m[0msigmoid[0m[0;34m([0m[0mparams[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m([0m[0mX_t[0m[0;34m)[0m [0;34m+[0m [0mparams[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m([0m[0mh_i[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    359[0m                 [0mr[0m [0;34m=[0m [0mF[0m[0;34m.[0m[0msigmoid[0m[0;34m([0m[0mparams[0m[0;34m[[0m[0;36m2[0m[0;34m][0m[0;34m([0m[0mX_t[0m[0;34m)[0m [0;34m+[0m [0mparams[0m[0;34m[[0m[0;36m3[0m[0;34m][0m[0;34m([0m[0mh_i[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    360[0m                 [0mg[0m [0;34m=[0m [0mF[0m[0;34m.[0m[0mtanh[0m[0;34m([0m[0mparams[0m[0;34m[[0m[0;36m4[0m[0;34m][0m[0;34m([0m[0mX_t[0m[0;34m)[0m [0;34m+[0m [0mparams[0m[0;34m[[0m[0;36m5[0m[0;34m][0m[0;34m([0m[0mr[0m [0;34m*[0m [0mh_i[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/torch/nn/modules/module.py[0m in [0;36m__call__[0;34m(self, *input, **kwargs)[0m
[1;32m    487[0m             [0mresult[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_slow_forward[0m[0;34m([0m[0;34m*[0m[0minput[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    488[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 489[0;31m             [0mresult[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mforward[0m[0;34m([0m[0;34m*[0m[0minput[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    490[0m         [0;32mfor[0m [0mhook[0m [0;32min[0m [0mself[0m[0;34m.[0m[0m_forward_hooks[0m[0;34m.[0m[0mvalues[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    491[0m             [0mhook_result[0m [0;34m=[0m [0mhook[0m[0;34m([0m[0mself[0m[0;34m,[0m [0minput[0m[0;34m,[0m [0mresult[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/torch/nn/modules/linear.py[0m in [0;36mforward[0;34m(self, input)[0m
[1;32m     65[0m     [0;34m@[0m[0mweak_script_method[0m[0;34m[0m[0;34m[0m[0m
[1;32m     66[0m     [0;32mdef[0m [0mforward[0m[0;34m([0m[0mself[0m[0;34m,[0m [0minput[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 67[0;31m         [0;32mreturn[0m [0mF[0m[0;34m.[0m[0mlinear[0m[0;34m([0m[0minput[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mweight[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mbias[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     68[0m [0;34m[0m[0m
[1;32m     69[0m     [0;32mdef[0m [0mextra_repr[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda/envs/cs236605-hw/lib/python3.7/site-packages/torch/nn/functional.py[0m in [0;36mlinear[0;34m(input, weight, bias)[0m
[1;32m   1352[0m         [0mret[0m [0;34m=[0m [0mtorch[0m[0;34m.[0m[0maddmm[0m[0;34m([0m[0mtorch[0m[0;34m.[0m[0mjit[0m[0;34m.[0m[0m_unwrap_optional[0m[0;34m([0m[0mbias[0m[0;34m)[0m[0;34m,[0m [0minput[0m[0;34m,[0m [0mweight[0m[0;34m.[0m[0mt[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1353[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1354[0;31m         [0moutput[0m [0;34m=[0m [0minput[0m[0;34m.[0m[0mmatmul[0m[0;34m([0m[0mweight[0m[0;34m.[0m[0mt[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1355[0m         [0;32mif[0m [0mbias[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1356[0m             [0moutput[0m [0;34m+=[0m [0mtorch[0m[0;34m.[0m[0mjit[0m[0;34m.[0m[0m_unwrap_optional[0m[0;34m([0m[0mbias[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mRuntimeError[0m: Expected object of backend CPU but got backend CUDA for argument #2 'mat2'
RuntimeError: Expected object of backend CPU but got backend CUDA for argument #2 'mat2'

Got errors while executing notebook Part1_Sequence.ipynb. Make sure you've implemented everything and that all tests pass.
>> Running 1 notebooks...
>> Running nbconvert on notebook Part1_Sequence.ipynb [execute|inplace]
*** SLURM BATCH JOB 'RNN_exp' DONE ***
